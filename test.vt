// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/04/2017 20:37:57"
                                                                                
// Verilog Test Bench template for design : test
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module test_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg key_begin;
reg reset;
reg sclk;
// wires                                               
wire [11:0]  addr;
wire [1:0]  bank;
wire CKE;
wire [3:0]  cmd;
wire CS;
wire [3:0]  reg1;
wire sdram_clk;

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.bank(bank),
	.CKE(CKE),
	.cmd(cmd),
	.CS(CS),
	.key_begin(key_begin),
	.reg1(reg1),
	.reset(reset),
	.sclk(sclk),
	.sdram_clk(sdram_clk)
);
initial                                                
begin  
key_begin = 0;
reset = 1;                                            
sclk = 0; 

end
always
begin
# 20 sclk = ~sclk;
end
always
begin
# 2  key_begin = 1;
# 250 $display("time %d,clk %d,key %d",$time,sclk,key_begin);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
# 1 $display("time %d,reg %b,addr %b,clk %d,cmd %b",$time,reg1,addr,sclk,cmd);
end                                                   
endmodule

